

비동기 -> Async
동기 -> Sync

동기방식
    - 작업을 순서대로 진행한다
    - A -> B -> C -> D
    - 코드로 치면 위에서 부터 아래로 실행


비동기 방식
    - 쓰레드를 만들어서 작업을 따로 처리한다


안드로이드에서 Async 다루는 방법
        -AsyncTask 상속받는다
            -> onPreExcute  : 쓰레드 출발하기전에 할 작업
            -> doIntBackground : 쓰레드가 할 작업
            -> onPregressUpdate : 중간중간에 MainThread로 결과 전달
            -> onPostExcute : 작업을 마친 후 MainThread로 온다.


Async의 장점
    - Main Thread를 기다리게 할 필요가 없다.
    - 네트워크 작업 (네이버에 요청 -> 네이버가 응답 -> 이 사이 시간에 만약 동기적으로 처리되면 앱이 중지되기 때문에 비동기를 사용)

단점
    - 재사용이 불가능 하다.(버튼안에 Async 객체 생성 코드를 넣어 버튼을 눌릴떄마다 생성이 되게끔해야됨. 만약 전역변수에 객체를 생성할
    경우 한번 더 Async를 시작할 경우 에러 발생
    - 구현된 Activity가 종료될 경우 같이 종료 되지 않는다.(startActivity로 만약에 다른 액태비티로 이동 했을 지라도 Async는 계속 작동하고 있음)
    -> 다음과 같은 경우는 생명주기에서 onPause()에다 cancel 함수를 정의해 놓는다.
    -> AsyncTask는 하나만 실행될 수 있다.(객체는 하나만 생성할 수 있다.(병렬처리x) 즉, 두개를 생성했다고 하면 두개가 따로 실행되는 것이 아닌
    하나가 실행이 되고 끝이 나면 나머지 하나가 실행이 된다.)